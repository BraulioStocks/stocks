# -*- coding: utf-8 -*-
"""Stock_Trend_Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r-mtj_b87TaeW3vY3X7Y0KcNw4X81jyU
"""


# streamlit_app.py

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import ta
import matplotlib.pyplot as plt

# === App Title ===
st.set_page_config(page_title="Stock Trend Predictor", layout="wide")
st.title("ðŸ“ˆ Stock Trend Predictor (XGBoost Edition)")

# === Inputs ===
ticker = st.text_input("Enter stock ticker (e.g., AAPL, TSLA):", value="AAPL")
start_date = st.date_input("Start date", pd.to_datetime("2020-01-01"))
end_date = st.date_input("End date", pd.to_datetime("2024-12-31"))

if st.button("Run Prediction"):

    # === Download Stock Data ===
    with st.spinner(f"Downloading {ticker} data..."):
        data = yf.download(ticker, start=start_date, end=end_date)

    if data.empty:
        st.warning("No data found for the given ticker/date range.")
    else:
        data.dropna(inplace=True)

        # === Feature Engineering ===
        data['Daily_Change_%'] = data['Close'].pct_change() * 100
        data['MA_5'] = data['Close'].rolling(window=5).mean()
        data['MA_10'] = data['Close'].rolling(window=10).mean()

        close_series = pd.Series(data['Close'].values.flatten(), index=data.index)
        rsi = ta.momentum.RSIIndicator(close=close_series, window=14)
        macd = ta.trend.MACD(close=close_series)

        data['RSI'] = rsi.rsi()
        data['MACD'] = macd.macd()
        data['MACD_Signal'] = macd.macd_signal()

        for i in range(1, 6):
            data[f'Close_lag_{i}'] = data['Close'].shift(i)

        data['Target'] = (data['Close'].shift(-1) > data['Close']).astype(int)
        data.dropna(inplace=True)

        # === Define Features ===
        features = [
            'Volume', 'Daily_Change_%', 'MA_5', 'MA_10', 'RSI',
            'MACD', 'MACD_Signal'
        ] + [f'Close_lag_{i}' for i in range(1, 6)]

        X = data[features]
        y = data['Target']

        # === Train/Test Split ===
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

        # === Model: XGBoost ===
        model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        # === Evaluation ===
        accuracy = accuracy_score(y_test, y_pred)
        st.success(f"âœ… Accuracy: {accuracy:.2%}")

        with st.expander("ðŸ“‹ Classification Report"):
            report = classification_report(y_test, y_pred, output_dict=False)
            st.code(report)

        # === Plot Predictions ===
        st.subheader(f"{ticker} Close Price with Predictions")
        data_test = data.iloc[-len(y_test):].copy()
        data_test['Prediction'] = y_pred

        fig, ax = plt.subplots(figsize=(12, 5))
        ax.plot(data_test.index, data_test['Close'], label='Close Price', color='blue')
        ax.scatter(data_test.index[data_test['Prediction'] == 1], data_test['Close'][data_test['Prediction'] == 1], color='green', label='Predicted Up')
        ax.scatter(data_test.index[data_test['Prediction'] == 0], data_test['Close'][data_test['Prediction'] == 0], color='red', label='Predicted Down')
        ax.set_title(f"{ticker} Stock Trend Prediction")
        ax.legend()
        ax.grid()
        st.pyplot(fig)
